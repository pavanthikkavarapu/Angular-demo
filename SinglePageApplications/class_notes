
    - Loading the Target WebPages to Source Webpage without Refreshing the Whole Webpage called as
      Single Page Application.

    - Loading the Target Pages to Source Page Called as Routing.

    - We Can Achieve the Routing in Single Page Application By using Following Modules.

        1.ngRoute
        2.ui.router

Steps to Design the Single Page Application by using ngRoute Module.
-

Step 1.

      Download ngRoute module by using bower.

bower.json
-
{
    "name":"nareshit",
    "dependencies":{
        "angular":"~1.5.0",
        "angular-route":"~1.5.0"
    }
}

.bowerrc.json
-
{
    "directory":"bower_components"
}


Step 2.
    Add the ngRoute Depenedency.

app.js
-
var app = angular.module("app",["ngRoute"]);


Step 3.
    Create the Target Templates

-------------
Basic_ngRoute
    templates
        page_one.html
        page_two.html
--------------

page_one.html
-
<h1>{{var_one}}</h1>


page_two.html
-
<h1>{{var_two}}</h1>


Step 4.
    Create the Controllers.

-----------
controllers
        page_one.js
        page_two.js
-----------
page_one.js
-
$scope.var_one = "Data From NodeJS Soon....";

page_two.js
-
$scope.var_two = "Data From MongoDB Soon....";


Step 5.
    Done the Mapping.

config.js
-

app.config(config);
config.$inject=["$routeProvider"];
function config($routeProvider){

    $routeProvider

    .when("/page_one",{
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })

    .when("/page_two",{
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    })

    .otherwise("/page_one",{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
    });
}


Step 6.

    Create the Source Template.

index.html
-

<a href="#page_one">Page_One</a>
<a href="#page_two">Page_Two</a>

<div ng-view></div>


Single Page Applications by using ui.router module
-

    - ui.router module is the 3rd party module.

    - ui.router supports the nested routing.

    - ui.router module supports named views.

    - ui.router module supports the JSON as the URL Routing Parameter.

Steps to Design the Single Page Application by using ui.router module.

1.Download ui.router module by using bower.

bower.json
-
{
    "name":"nareshit",
    "dependencies":{
        "angular":"~1.6.0",
        "angular-ui-router":"~0.2.18"
    }
}

.bowerrc
-
{
    "directory" : "bower_components"
}

>bower install


2. add the ui.router module dependency.

app.js
-
var app = angular.module("app",["ui.router"]);


3. Create the Target Templates.

-------------
templates
        page_one.html

        page_two.html
-------------
page_one.html
-
<h1>{{var_one}}</h1>


page_two.html
-
<h1>{{var_two}}</h1>


4.Create the Controllers.
------------------
controllers
    page_one.js
    page_two.js
------------------

page_one.js
-
$scope.var_one = "I am from page one controller";


page_two.js
-
$scope.var_two = "I am from page two controller";

5.Done the mapping.

config.js
-
app.config(config);
config.$inject=["$stateProvider","$urlRouterProvider"];
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    });
    $urlRouterProvider.otherwise("/page_one");
}


6.create the source template (index.html)

<a ui-sref="page_one"><b>Page_One</b></a>
<a ui-sref="page_two"><b>Page_One</b></a>

<br><br>

<div ui-view></div>

passing json object by using ui.router module
-
index.html
-

<a ui-sref="page_one({'id':1,'name':'Hello_1'})">Page_One</a>

config.js
-

$stateProvider.state("page_one",{

    url:"/page_one/:id/:name",
    templateUrl:"templates/page_one.html",
    controller:"page_one"

});


page_one.js
-

app.controller("page_one",page_one);
page_one.$inject=["$scope","$stateParams"];
function page_one($scope,$stateParams){
    $scope.var_one = $stateParams.id+"..."+$stateParams.name;
}


NestedRouting in SinglePageApplication by using ui.router module.
-

Step 1.
    Download the ui.router module.


Step 2.
    Add the ui.router module dependency.

Step 3.
    Create the Templates
------------
templates
    page_one.html
    page_two.html
    child_one.html
    child_two.html
--------------

page_one.html
-

<h1>{{var_one}}</h1>
<a ui-sref=".child_one">Child_One</a>
<div ui-view></div>


page_two.html
-
<h1>{{var_two}}</h1>
<a ui-sref=".child_two">Child_Two</a>
<div ui-view></div>

child_one.html
-
<h1>{{child_one}}</h1>

child_two.html
-
<h1>{{child_two}}</h1>


Step 4.
    Create the Controllers.

--------------------
controllers
    page_one.js
    page_two.js
    child_one.js
    child_two.js
--------------------


Step 5.
    Done the Mapping.

app.config(config);
config.$inject=["$stateProvider","$urlRouterProvider"];
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one",{
        url:"/page_one",
        templateUrl:"templates/page_one.html",
        controller:"page_one"
    })
    .state("page_one.child_one",{
            url:"/child_one",
            templateUrl:"templates/child_one.html",
            controller:"child_one"
    })
    .state("page_two",{
            url:"/page_two",
            templateUrl:"templates/page_two.html",
            controller:"page_two"
    })
    .state("page_two.child_two",{
                url:"/child_two",
                templateUrl:"templates/child_two.html",
                controller:"child_two"
    });
    $urlRouterProvider.otherwise("/page_one");
}


Step 6.
    Create the Source Template (index.html)


NamedViews in Single Page Application by using ui.router module.
-
    - Building the Target Webpages with more than one subview called as NamedViews in
      Single Page Application


Step 1.
    Download the ui.router module.


Step 2.
    Add the ui.router module dependency.


Step 3.
    Create the Templates

--------------------
templates
    page_one.html
    page_two.html
    calc.html
    summary.html
--------------------

page_one.html
-
<h1>{{var_one}}</h1>
<div ui-view="calc"></div>
<div ui-view="summary"></div>

Step 4.
    Create the Controllers.

Step 5.
    Done the Mapping.


    $stateProvider.state("page_one",{
            url:"/page_one",
            views:{
                '':{
                    templateUrl:'templates/page_one.html',
                    controller:'page_one'
                },
                'calc@page_one':{
                     templateUrl:'templates/calc.html',
                     controller:'calcController'
                 },
                 'summary@page_one':{
                      templateUrl:'templates/summary.html',
                      controller:'summaryController'
                 }
            }
    });


Step 6.
    Create the Source Template (index.html)






























































































































































