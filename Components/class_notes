 - Encapsulation of View , Data  and View Behaviour Called as Components.

 - Every Angular2 Application Must Contain At least one Component(Root Component).

 - Angular2 Application May Contain More than one Component.

 - As a Angular2 Developer We Can Provide the Communication Between Components.

 - Collection Of TypeScript Class with Decorator(MetaData) Called as Component.

Ex_1.

    import { Component } from 'angular2/core';
    @Component({
        selector : "first-app",
        template : "UserName : {{uname}} <br>
                   User Email: {{uemail}} <br>
                   Address   : {{address.city}} &emsp; {{address.area}} &emsp; {{address.state}}"
    })
    export class Test{
        uname : string = "";
        uemail : string = "";
        address : my_address;
        constructor(){
            this.uname = "admin";
            this.uemail = "hr@nareshit.in";
            this.my_address = {
                this.city : "Hyderabad",
                this.area : "Ameerpet"
                this.state : "TS"
            }
        }
        interface my_address{
            city : string;
            area : string;
            state : string;
        }
    }

 Ex_2.
    template : <ul>
                    <li *ngFor = "let x in data">{{x}}</li>
               </ul>
        --
        --
    data : string[];
    constructor(){
        this.data = ["Hello_1","Hello_2","Hello_3","Hello_4","Hello_5"];
    }
       --
       --
    Hello_1
    Hello_2
    Hello_3
    Hello_4
    Hello_5



Ex_3.

    template : <button (click) = "my_fun()">ClickMe</button>
    export class Test{
        --
        --
        my_fun(){
            console.log("You Clicked Button !");
        }

    }


Ex_4.


    template : "<div *ngIf = flag>
                   <h1>Welcome to ngIf</h1>
               </div>
               <br>
               <button (click)='toggle(flag)'>Toggle</button>"

    export class Test{
         flag:boolean;
         constructor(){
            this.flag = false;
         }
         toggle(data){
            if(data){
                flag=false;
            }else{
                flag=true;
            }
         }
    }




import {Component} from 'angular2/core';

@Component({
    selector: 'my-app',
    template: '<h1>Address:</h1>&emsp;&emsp;&emsp; {{address.city}}<br>&emsp;&emsp;&emsp;{{address.state}}<br>&emsp;&emsp;&emsp;{{address.area}}'

})
export class AppComponent {
    uname:string="";
    email:string="";
    address:address;
    flag:boolean;
    constructor(){
        this.uname = "admin";
        this.email = "hr@nareshit.in";
        this.address={
            city:'Hyderabad',
            state:'Telangana',
            area:'Ameerpet'
        }
        this.flag=false;
    }
}

interface address{
    city:string;
    state:string;
    area:string;
}

Properties for Components.
-

1.selector.
    - used to give the logical name for Component , which will directly Interacting with the View.

Ex.

      @Component({
        selector : 'my-app'
      })

[Note . Selector Property is the Mandatory Property ].


2. providers.
        - used to create the Dependency Injection Between Angular Components.


Ex.
        export class MyService{
            getData(){
                return "Data From MongoDB Soon...";
            }
        }

       @Component({
            selector : "my-app",
            providers : ['MyService']
       })

3.template.
         - used to add the inline html to the Component.
         - it's better to take to external template while developing the Component.

 Ex.
         @Component({
            selector:'my-app',
            template:'<b>Welcome to Components</b>'
         })

4.templateUrl.

    - used to add the external templates to the custom components.

    - it's recomended to maintain the separate templates while developing the components,
      automatically reusability of templates will be incresed.


sample.html
-
<table class='table table-responsive'>
    <tr>
        <td>{{address.city}}</td>
        <td>{{address.state}}</td>
        <td>{{address.area}}</td>
    </tr>
</table>

@Component({
    selector : 'my-app',
    templateUrl:'sample.html'
})
export class Test{
    address={
        state:'TS',
        city:'Hyd',
        area:'Ameerpet'
    }
}


5.directives.

    - used to configure the custom directives.

    - directives are used to perform the manipulations on DOM.

    - we have two types of directives.

        1.Predefined Directives.

        2.Custom Directives.

    Predefined directives.

        The Directives Given By the Angular2 UI Framework called as Predefined Directives.

        We Can Directly use the Predefined Directives without Configuring in Components.

        Ex.
            *ngIf
            *ngFor
            *ngModel
            *ngBind
                -
                -
                -
    Custom Directives.
        - The Directives Developed By Angular2 Developer Called as Custom Directives.
        - We Must Register Custom Directives in Custom Components in order use the
          Custom Directives.

        export class Reverse{
            constructor(arg1:string){
                let data = "";
                for(let x=0; x < arg1.length ; x++){
                    data = arg1[x] + data;
                }
                return data;
            }
        }
        @Component({
            selector:'my-app',

            directives : ['Reverse'];
        })



















